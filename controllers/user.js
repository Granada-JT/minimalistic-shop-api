// Imports required dependencies and modules.
const auth = require("../auth");
const bcrypt = require('bcrypt');
const User = require("../models/User");
const Product = require("../models/Product")
const Order = require("../models/Order")

// This function is for checking if the user email already exists.
module.exports.checkEmailExists = (req, res) => {
	return User.find({email: req.body.email}).then(result => 
        {
            if(result.length > 0) {
                return res.send("Email already exists");
            } else {
                return res.send("Email does not yet exist, you may proceed in registering");
            }
	    }   
    )
};

// This function is for user registration.
module.exports.registerUser = (req, res) => {
	let newUser = new User({
		firstName: req.body.firstName,
		lastName: req.body.lastName,
		email: req.body.email,
		mobileNo: req.body.mobileNo,
		password: bcrypt.hashSync(req.body.password, 10)
	})
	return newUser.save().then((user, error) => {
		if(error) {
			return false;
		} else {
			return res.send("Registered Successfully, Welcome shopper!")
		}
	}) .catch(err => res.send(err));
};

// This function is for logging in the user and for generating his/her own bearer/access token.
module.exports.loginUser = (req, res) => {
    return User.findOne({ email: req.body.email }).then(result => {
        if (result == null) {
            return res.send("Email is incorrect, please try again.");
        } else {
            const isPasswordCorrect = bcrypt.compareSync(req.body.password, result.password);

            if (isPasswordCorrect) {
                const accessToken = auth.createAccessToken(result);
                return res.send(`Login successful, you are now currently logged in. Welcome!\nAccess token:\n"${accessToken}"`);
            } else {
                return res.send("Password is incorrect, please try again.");
            }
        }
    }).catch(err => res.send(err));
};


// This function is for retrieving user details
module.exports.getUserDetails = (req, res) => {
	return User.findById(req.user.id).then(result => {
		result.password = "";
		return res.send(result)
	})
	.catch(err => res.send(err))
};

// This function is for resetting the password of an individual user.
module.exports.resetPassword = async (req, res) => {
    try {
        const { newPassword } = req.body;
        const { id } = req.user; // Extracting user ID from the authorization header

        // Hashing the new password
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // Updating the user's password in the database
        await User.findByIdAndUpdate(id, { password: hashedPassword });

        // Sending a success response
        res.status(200).json({ message: 'Password reset successfully' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

// This function updates a user to become an admin.
module.exports.updateToAdmin = (req, res) => {
	// Checks if the # of characters of the objectId provided is equal to the standard random 24 characters generated by mongoDB
	if (req.body.id.length !== 24) {
		return res.send(`Invalid user ID, please try again.`);
	}
    return User.findById(req.body.id).then(result => {
        if (result == null) {
            return res.send("This user is not found");
        }
        if (result.isAdmin) {
            return res.send("This user is already an admin.");
        } else {
			// Create a copy of the original user details
            const originalUserDetails = { ...result.toObject() }; 

			// Set isAdmin to false to imitate the original user isAdmin property.
            originalUserDetails.isAdmin = false;

			// Update the isAdmin property of the result object.
            result.isAdmin = true; 

            // Save the updated user object
            return result.save().then(() => {
                return res.send(`User found:\n${JSON.stringify(originalUserDetails, null, 2)}\nUser updated to admin successfully:\n${JSON.stringify(result, null, 2)}`);
            });
        }
    })
    .catch(err => res.send(err));
};

// This function retrieves the logged in user's orders.
module.exports.getOrders = (req, res) => {
    return User.findById(req.user.id)
        .then(result => {
            if (result.isAdmin) {
                return res.send("This user is an admin, placing orders is prohibited.");
            } else {
                Order.find({ userId: req.user.id })
                    .then((orders) => {
                        if (orders.length === 0) {
                            return res.send("No orders found for this user");
                        } else {
                            return res.send(`Order details: \n ${orders}`);
                        }
                    })
                    .catch(err => res.send(err));
            }
        })
        .catch(err => res.send(err));
};


